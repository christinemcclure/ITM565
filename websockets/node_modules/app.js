var app = require('express').createServer()
var io = require('socket.io').listen(app);
var testApp = app.listen(8080);
console.log ('App running. Go to http://localhost:8080/');

var j = 0; // set loop for assigned user colors

// routing
app.get('/', function (req, res) {
  res.sendfile(__dirname + '/index.html');
});

// usernames which are currently connected to the chat
var usernamesWithClass = {} // uses j to add a class of 'color1', 'color2', etc.
var usernamesWithClassInline = {}  // also include a note to display inline in chat window to avoid breaks

io.sockets.on('connection', function (socket) {
//		socket.emit('updatechat', 'DEBUG - socket open', '** j is ' + j);
	
// only have 10 colors in stylesheet, so start over after that	
		if (j<=9) 
			j++;
		else
			j=1;

	// when the client emits 'sendchat', this listens and executes
	socket.on('sendchat', function (data) {
		
		// we tell the client to execute 'updatechat' with 2 parameters
		io.sockets.emit('updatechat', usernamesWithClassInline[socket.username], data);
	});


		// when the client emits 'adduser', this listens and executes
		socket.on('adduser', function(username){
		// we store the username in the socket session for this client
		socket.username = username;			
		
		// add the client's username to the global lists	
		usernamesWithClassInline[username] = '<div class=\"color' + j  + ' inline\">' + username +  '<\/div>';
		usernamesWithClass[username] = '<div class=\"color' + j  + '\">' + username +  '<\/div>';
		
//		socket.emit('updatechat', 'DEBUG - adduser', '** j is ' + j);

		// acknowledge new user	
		socket.emit('updatechat', '(server)', 'Welcome, ' + usernamesWithClassInline[username] + '. You are now connected to chat.');

		// echo globally (all clients) that a person has connected
		socket.broadcast.emit('updatechat', '(server)', 'User \'' + usernamesWithClassInline[username] + '\' has joined.');

		// update the list of users in chat, client-side
		io.sockets.emit('updateusers', usernamesWithClass);
	});

	// when the user disconnects.. perform this
		socket.on('disconnect', function(){

			// update list of users in chat, client-side
			io.sockets.emit('updateusers', usernamesWithClass);

			// echo globally that this client has left
			socket.broadcast.emit('updatechat', 'SERVER',   usernamesWithClassInline[socket.username] + ' has disconnected');

			// remove the username from global usernames list
			delete usernamesWithClassInline[socket.username];
			delete usernamesWithClass[socket.username];
	});
	
});